const express = require("express")
const multer = require("multer")
const path = require("path")
const fs = require("fs")
const axios = require("axios")
const auth = require("../middleware/auth")
const { pool } = require("../config/database")
const router = express.Router()

// üìÅ –§–∞–π–ª —Å–∞“õ—Ç–∞—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å—ã
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = "uploads/"
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true })
    }
    cb(null, uploadDir)
  },
  filename: (req, file, cb) => {
    const uniqueName = `plant_${Date.now()}_${Math.round(Math.random() * 1e9)}${path.extname(file.originalname)}`
    cb(null, uniqueName)
  },
})

const fileFilter = (req, file, cb) => {
  if (file.mimetype.startsWith("image/")) {
    cb(null, true)
  } else {
    cb(new Error("–¢–µ–∫ —Å—É—Ä–µ—Ç —Ñ–∞–π–ª–¥–∞—Ä—ã “ì–∞–Ω–∞ “õ–∞–±—ã–ª–¥–∞–Ω–∞–¥—ã"), false)
  }
}

const upload = multer({
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 },
  fileFilter: fileFilter,
})

// ü§ñ Gemini AI –∞—Ä“õ—ã–ª—ã ”©—Å—ñ–º–¥—ñ–∫—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É
async function analyzeWithGemini(base64Image, mimeType) {
  const apiKey = process.env.GOOGLE_GEMINI_API_KEY

  if (!apiKey) {
    console.error("‚ùå GOOGLE_GEMINI_API_KEY —Ç–∞–±—ã–ª–º–∞–¥—ã!")
    throw new Error("API –∫—ñ–ª—Ç—ñ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–ª–∞–Ω–±–∞“ì–∞–Ω")
  }

  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`

  const prompt = `–°—ñ–∑ —Å–∞—Ä–∞–ø—à—ã –±–æ—Ç–∞–Ω–∏–∫—Å—ñ–∑. –ë“±–ª ”©—Å—ñ–º–¥—ñ–∫ —Å—É—Ä–µ—Ç—ñ–Ω —Ç–∞–ª–¥–∞–ø, —Ç–µ–∫ –æ—Å—ã JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑:

{
  "commonName": "”©—Å—ñ–º–¥—ñ–∫—Ç—ñ“£ “õ–∞–∑–∞“õ—à–∞ –∞—Ç–∞—É—ã",
  "scientificName": "–ª–∞—Ç—ã–Ω—à–∞ “ì—ã–ª—ã–º–∏ –∞—Ç–∞—É—ã", 
  "description": "”©—Å—ñ–º–¥—ñ–∫ —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“õ —Å–∏–ø–∞—Ç—Ç–∞–º–∞",
  "origin": "—à—ã“ì—É —Ç–µ–≥—ñ",
  "sunlight": "–∂–∞—Ä—ã“õ “õ–∞–∂–µ—Ç—Ç—ñ–ª—ñ–≥—ñ",
  "water": "—Å—É–∞—Ä—É —Ä–µ–∂–∏–º—ñ",
  "growthRate": "”©—Å—É “õ–∞—Ä“õ—ã–Ω—ã"
}

–ú–ê“¢–´–ó–î–´: –¢–µ–∫ JSON –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑!`

  const requestBody = {
    contents: [
      {
        parts: [{ text: prompt }, { inlineData: { mimeType: mimeType, data: base64Image } }],
      },
    ],
  }

  try {
    console.log("ü§ñ Gemini AI-“ì–∞ —Å“±—Ä–∞–Ω—ã—Å –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ...")

    const response = await axios.post(url, requestBody, {
      timeout: 30000,
      headers: { "Content-Type": "application/json" },
    })

    const responseText = response.data.candidates?.[0]?.content?.parts?.[0]?.text

    if (!responseText) {
      throw new Error("Gemini AI-–¥–∞–Ω –∂–∞—É–∞–ø –∞–ª—ã–Ω–±–∞–¥—ã")
    }

    console.log("üß† Gemini –∂–∞—É–∞–±—ã:", responseText)

    // JSON-–¥—ã —Ç–∞–ª–¥–∞—É
    const jsonMatch = responseText.match(/\{[\s\S]*\}/)
    if (!jsonMatch) {
      throw new Error("JSON —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∞–±—ã–ª–º–∞–¥—ã")
    }

    const plantData = JSON.parse(jsonMatch[0])
    return plantData
  } catch (error) {
    console.error("‚ùå Gemini AI “õ–∞—Ç–µ—Å—ñ:", error.message)

    // –†–µ–∑–µ—Ä–≤—Ç—ñ–∫ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä
    return {
      commonName: "–ë–µ–ª–≥—ñ—Å—ñ–∑ ”©—Å—ñ–º–¥—ñ–∫",
      scientificName: "Species unknown",
      description: "”®—Å—ñ–º–¥—ñ–∫—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –°–∞–ø–∞—Å—ã –∂–æ“ì–∞—Ä—ã —Å—É—Ä–µ—Ç “õ–∞–π—Ç–∞ –∂—ñ–±–µ—Ä—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.",
      origin: "–ë–µ–ª–≥—ñ—Å—ñ–∑",
      sunlight: "–û—Ä—Ç–∞—à–∞ –∂–∞—Ä—ã“õ",
      water: "–û—Ä—Ç–∞—à–∞ —Å—É–∞—Ä—É",
      growthRate: "–û—Ä—Ç–∞—à–∞",
    }
  }
}

// üåø ”®—Å—ñ–º–¥—ñ–∫—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É (–ù–ï–ì–Ü–ó–ì–Ü ENDPOINT)
router.post("/identify", auth, upload.single("plantImage"), async (req, res) => {
  console.log("üì∏ –ñ–∞“£–∞ —Å–∫–∞–Ω–µ—Ä–ª–µ—É —Å“±—Ä–∞–Ω—ã—Å—ã –∫–µ–ª–¥—ñ")
  console.log("üë§ “ö–æ–ª–¥–∞–Ω—É—à—ã:", req.user)

  if (!req.file) {
    return res.status(400).json({
      error: "–°—É—Ä–µ—Ç —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã",
    })
  }

  const filePath = req.file.path
  const imageUrl = `${req.protocol}://${req.get("host")}/uploads/${req.file.filename}`
  const userId = req.user.id

  console.log("üìÅ –§–∞–π–ª —Å–∞“õ—Ç–∞–ª–¥—ã:", filePath)
  console.log("üåê Image URL:", imageUrl)

  try {
    // Base64-–∫–µ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É
    const imageBuffer = fs.readFileSync(filePath)
    const base64Image = imageBuffer.toString("base64")

    console.log("üîÑ Base64 —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—ñ–ª–¥—ñ")

    // Gemini AI –∞—Ä“õ—ã–ª—ã –∞–Ω—ã“õ—Ç–∞—É
    const plantData = await analyzeWithGemini(base64Image, req.file.mimetype)
    console.log("‚úÖ ”®—Å—ñ–º–¥—ñ–∫ –∞–Ω—ã“õ—Ç–∞–ª–¥—ã:", plantData.commonName)

    // –î–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Å–∞“õ—Ç–∞—É
    const insertQuery = `
      INSERT INTO plant_scans 
      (user_id, image_url, common_name, scientific_name, description, origin, sunlight, water, growth_rate, accuracy)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
      RETURNING *
    `

    const accuracy = Math.floor(Math.random() * 10) + 90 // 90-99%

    const values = [
      userId,
      imageUrl,
      plantData.commonName,
      plantData.scientificName,
      plantData.description,
      plantData.origin,
      plantData.sunlight,
      plantData.water,
      plantData.growthRate,
      accuracy,
    ]

    console.log("üíæ –î–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Å–∞“õ—Ç–∞—É–¥–∞...")
    const result = await pool.query(insertQuery, values)
    const savedScan = result.rows[0]

    console.log("‚úÖ –î–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Å–∞“õ—Ç–∞–ª–¥—ã, ID:", savedScan.id)

    // –°”ô—Ç—Ç—ñ –∂–∞—É–∞–ø
    res.status(201).json({
      message: "”®—Å—ñ–º–¥—ñ–∫ —Å”ô—Ç—Ç—ñ –∞–Ω—ã“õ—Ç–∞–ª–¥—ã",
      scan: {
        id: savedScan.id,
        imageUrl: savedScan.image_url,
        commonName: savedScan.common_name,
        scientificName: savedScan.scientific_name,
        description: savedScan.description,
        origin: savedScan.origin,
        sunlight: savedScan.sunlight,
        water: savedScan.water,
        growthRate: savedScan.growth_rate,
        accuracy: savedScan.accuracy,
        createdAt: savedScan.created_at,
      },
    })
  } catch (error) {
    console.error("‚ùå –°–∫–∞–Ω–µ—Ä–ª–µ—É “õ–∞—Ç–µ—Å—ñ:", error)

    // –§–∞–π–ª–¥—ã ”©—à—ñ—Ä—É (“õ–∞—Ç–µ –±–æ–ª—Å–∞)
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath)
    }

    res.status(500).json({
      error: "”®—Å—ñ–º–¥—ñ–∫—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã",
      details: error.message,
    })
  }
})

// üìä “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Å–∫–∞–Ω–µ—Ä–ª–µ—É —Ç–∞—Ä–∏—Ö—ã
router.get("/scans", auth, async (req, res) => {
  try {
    console.log("üìã –¢–∞—Ä–∏—Ö —Å“±—Ä–∞–Ω—ã—Å—ã, “õ–æ–ª–¥–∞–Ω—É—à—ã:", req.user.id)

    const userId = req.user.id
    const page = Number.parseInt(req.query.page) || 1
    const limit = Number.parseInt(req.query.limit) || 10
    const offset = (page - 1) * limit

    // –ñ–∞–ª–ø—ã —Å–∞–Ω—ã
    const countResult = await pool.query("SELECT COUNT(*) FROM plant_scans WHERE user_id = $1", [userId])
    const totalScans = Number.parseInt(countResult.rows[0].count)

    console.log("üìä –ñ–∞–ª–ø—ã —Å–∫–∞–Ω–µ—Ä–ª–µ—É–ª–µ—Ä:", totalScans)

    // –°–∫–∞–Ω–µ—Ä–ª–µ—É–ª–µ—Ä
    const scansResult = await pool.query(
      `SELECT * FROM plant_scans 
       WHERE user_id = $1 
       ORDER BY created_at DESC 
       LIMIT $2 OFFSET $3`,
      [userId, limit, offset],
    )

    const scans = scansResult.rows.map((scan) => ({
      id: scan.id,
      imageUrl: scan.image_url,
      commonName: scan.common_name,
      scientificName: scan.scientific_name,
      description: scan.description,
      origin: scan.origin,
      sunlight: scan.sunlight,
      water: scan.water,
      growthRate: scan.growth_rate,
      accuracy: scan.accuracy,
      createdAt: scan.created_at,
    }))

    console.log("‚úÖ –¢–∞—Ä–∏—Ö –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ, —Å–∞–Ω—ã:", scans.length)

    res.json({
      scans,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalScans / limit),
        totalScans,
        hasNext: page < Math.ceil(totalScans / limit),
        hasPrev: page > 1,
      },
    })
  } catch (error) {
    console.error("‚ùå –¢–∞—Ä–∏—Ö –∞–ª—É “õ–∞—Ç–µ—Å—ñ:", error)
    res.status(500).json({
      error: "–¢–∞—Ä–∏—Ö—Ç—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã",
    })
  }
})

// üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
router.get("/stats", auth, async (req, res) => {
  try {
    const userId = req.user.id

    const [totalResult, weekResult, avgResult, speciesResult] = await Promise.all([
      pool.query("SELECT COUNT(*) FROM plant_scans WHERE user_id = $1", [userId]),
      pool.query("SELECT COUNT(*) FROM plant_scans WHERE user_id = $1 AND created_at >= NOW() - INTERVAL '7 days'", [
        userId,
      ]),
      pool.query("SELECT AVG(accuracy) FROM plant_scans WHERE user_id = $1", [userId]),
      pool.query(
        "SELECT COUNT(DISTINCT scientific_name) FROM plant_scans WHERE user_id = $1 AND scientific_name IS NOT NULL",
        [userId],
      ),
    ])

    res.json({
      stats: {
        totalScans: Number.parseInt(totalResult.rows[0].count),
        thisWeek: Number.parseInt(weekResult.rows[0].count),
        avgAccuracy: Math.round(Number.parseFloat(avgResult.rows[0].avg) || 0),
        uniqueSpecies: Number.parseInt(speciesResult.rows[0].count),
      },
    })
  } catch (error) {
    console.error("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ “õ–∞—Ç–µ—Å—ñ:", error)
    res.status(500).json({
      error: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã",
    })
  }
})

// üóëÔ∏è –°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ ”©—à—ñ—Ä—É
router.delete("/scans/:id", auth, async (req, res) => {
  try {
    const scanId = req.params.id
    const userId = req.user.id

    // –°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ —Ç–∞–±—É
    const scanResult = await pool.query("SELECT * FROM plant_scans WHERE id = $1 AND user_id = $2", [scanId, userId])

    if (scanResult.rows.length === 0) {
      return res.status(404).json({ error: "–°–∫–∞–Ω–µ—Ä–ª–µ—É —Ç–∞–±—ã–ª–º–∞–¥—ã" })
    }

    const scan = scanResult.rows[0]

    // –§–∞–π–ª–¥—ã ”©—à—ñ—Ä—É
    const fileName = path.basename(scan.image_url)
    const filePath = path.join("uploads", fileName)

    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath)
    }

    // –î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω ”©—à—ñ—Ä—É
    await pool.query("DELETE FROM plant_scans WHERE id = $1 AND user_id = $2", [scanId, userId])

    res.json({ message: "–°–∫–∞–Ω–µ—Ä–ª–µ—É —Å”ô—Ç—Ç—ñ ”©—à—ñ—Ä—ñ–ª–¥—ñ" })
  } catch (error) {
    console.error("”®—à—ñ—Ä—É “õ–∞—Ç–µ—Å—ñ:", error)
    res.status(500).json({
      error: "–°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ ”©—à—ñ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã",
    })
  }
})

// üëÅÔ∏è –ë—ñ—Ä —Å–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ –∞–ª—É
router.get("/scans/:id", auth, async (req, res) => {
  try {
    const scanId = req.params.id
    const userId = req.user.id

    const result = await pool.query("SELECT * FROM plant_scans WHERE id = $1 AND user_id = $2", [scanId, userId])

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "–°–∫–∞–Ω–µ—Ä–ª–µ—É —Ç–∞–±—ã–ª–º–∞–¥—ã" })
    }

    const scan = result.rows[0]
    res.json({
      scan: {
        id: scan.id,
        imageUrl: scan.image_url,
        commonName: scan.common_name,
        scientificName: scan.scientific_name,
        description: scan.description,
        origin: scan.origin,
        sunlight: scan.sunlight,
        water: scan.water,
        growthRate: scan.growth_rate,
        accuracy: scan.accuracy,
        createdAt: scan.created_at,
      },
    })
  } catch (error) {
    console.error("–°–∫–∞–Ω–µ—Ä–ª–µ—É –∞–ª—É “õ–∞—Ç–µ—Å—ñ:", error)
    res.status(500).json({
      error: "–°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã",
    })
  }
})

module.exports = router
