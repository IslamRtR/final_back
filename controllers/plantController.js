const axios = require("axios") // Axios –∫—ñ—Ç–∞–ø—Ö–∞–Ω–∞—Å—ã–Ω HTTP —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä—ã–Ω –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω “õ–æ—Å—É
const { pool } = require("../config/database") // PostgreSQL –¥–µ—Ä–µ–∫“õ–æ—Ä—ã–Ω –±–∞—Å“õ–∞—Ä—É “Ø—à—ñ–Ω pool “õ–æ—Å—É
const fs = require("fs") // –§–∞–π–ª –∂“Ø–π–µ—Å—ñ–º–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ—É “Ø—à—ñ–Ω fs “õ–æ—Å—É
const path = require("path") // –§–∞–π–ª –∂–æ–ª–¥–∞—Ä—ã–Ω–∞ –∂“±–º—ã—Å —ñ—Å—Ç–µ—É “Ø—à—ñ–Ω path “õ–æ—Å—É

// üåø ”®—Å—ñ–º–¥—ñ–∫—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É
const identifyPlant = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "–°—É—Ä–µ—Ç —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã" }) // –ï–≥–µ—Ä —Å—É—Ä–µ—Ç –∂–æ“õ –±–æ–ª—Å–∞, “õ–∞—Ç–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞
    }

    const userId = req.user.id // “ö–æ–ª–¥–∞–Ω—É—à—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const imagePath = req.file.path // –§–∞–π–ª–¥—ã“£ –∂–æ–ª—ã
    const imageUrl = `${req.protocol}://${req.get("host")}/uploads/${req.file.filename}` // –°—É—Ä–µ—Ç URL

    // –°—É—Ä–µ—Ç—Ç—ñ base64-–∫–µ –∞–π–Ω–∞–ª–¥—ã—Ä—É
    const imageBuffer = fs.readFileSync(imagePath) // –°—É—Ä–µ—Ç—Ç—ñ –æ“õ—É
    const base64Image = imageBuffer.toString("base64") // Base64-–∫–µ —Ç“Ø—Ä–ª–µ–Ω–¥—ñ—Ä—É

    const apiKey = process.env.GOOGLE_GEMINI_API_KEY // Gemini API –∫—ñ–ª—Ç—ñ
    if (!apiKey) {
      return res.status(500).json({ error: "API –∫—ñ–ª—Ç—ñ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–ª–∞–Ω–±–∞“ì–∞–Ω" }) // –ï–≥–µ—Ä API –∫—ñ–ª—Ç—ñ –∂–æ“õ –±–æ–ª—Å–∞, “õ–∞—Ç–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞
    }

    const url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + apiKey

    // API-“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ—Ç—ñ–Ω —Å“±—Ä–∞–Ω—ã—Å –º”ô—Ç—ñ–Ω—ñ
    const prompt = `–°—ñ–∑ —Å–∞—Ä–∞–ø—à—ã –±–æ—Ç–∞–Ω–∏–∫—Å—ñ–∑. –ë“±–ª ”©—Å—ñ–º–¥—ñ–∫ —Å—É—Ä–µ—Ç—ñ–Ω —Ç–∞–ª–¥–∞–ø, —Ç–µ–∫ –æ—Å—ã –∫—ñ–ª—Ç—Ç–µ—Ä–¥—ñ –ø–∞–π–¥–∞–ª–∞–Ω—ã–ø JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑ (–∂–∞—É–∞–ø “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫):
{
  "commonName": "",
  "scientificName": "",
  "description": "",
  "origin": "",
  "sunlight": "",
  "water": "",
  "growthRate": ""
}`

    try {
      const response = await axios.post( // Gemini API-“ì–∞ POST —Å“±—Ä–∞–Ω—ã—Å—ã–Ω –∂—ñ–±–µ—Ä—É
        url,
        {
          contents: [
            { parts: [{ text: prompt }] },
            { parts: [{ inlineData: { data: base64Image, mimeType: req.file.mimetype } }] },
          ],
        },
        {
          timeout: 30000, // –¢–∞–π–º-–∞—É—Ç
        },
      )

      let plantInfo
      try {
        const responseText = response.data.candidates[0].content.parts[0].text // API –∂–∞—É–∞–ø –º”ô—Ç—ñ–Ω—ñ
        const jsonMatch = responseText.match(/\{[\s\S]*\}/) // JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω —Ç–∞–±—É
        if (jsonMatch) {
          plantInfo = JSON.parse(jsonMatch[0]) // JSON-–¥—ã –ø–∞—Ä—Å–∏–Ω–≥
        } else {
          throw new Error("JSON —Ç–∞–±—ã–ª–º–∞–¥—ã") // JSON —Ç–∞–±—ã–ª–º–∞—Å–∞, “õ–∞—Ç–µ
        }
      } catch (parseError) {
        console.error("JSON —Ç–∞–ª–¥–∞—É “õ–∞—Ç–µ—Å—ñ:", parseError) // JSON —Ç–∞–ª–¥–∞—É–¥–∞“ì—ã “õ–∞—Ç–µ
        // –†–µ–∑–µ—Ä–≤—Ç—ñ–∫ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä
        plantInfo = {
          commonName: "–ë–µ–ª–≥—ñ—Å—ñ–∑ ”©—Å—ñ–º–¥—ñ–∫",
          scientificName: "Species unknown",
          description: "”®—Å—ñ–º–¥—ñ–∫—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –°–∞–ø–∞—Å—ã –∂–æ“ì–∞—Ä—ã —Å—É—Ä–µ—Ç “õ–∞–π—Ç–∞ –∂—ñ–±–µ—Ä—ñ–ø –∫”©—Ä—ñ“£—ñ–∑.",
          origin: "–ë–µ–ª–≥—ñ—Å—ñ–∑",
          sunlight: "–û—Ä—Ç–∞—à–∞ –∂–∞—Ä—ã“õ",
          water: "–û—Ä—Ç–∞—à–∞ —Å—É–∞—Ä—É",
          growthRate: "–û—Ä—Ç–∞—à–∞",
        }
      }

      const accuracy = Math.floor(Math.random() * 10) + 90 // 90-99% –∞—Ä–∞—Å—ã–Ω–¥–∞ –∫–µ–∑–¥–µ–π—Å–æ“õ –¥”ô–ª–¥—ñ–∫

      // –î–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Å–∞“õ—Ç–∞—É
      const result = await pool.query(
        `
        INSERT INTO plant_scans 
        (user_id, image_url, common_name, scientific_name, description, origin, sunlight, water, growth_rate, accuracy)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        RETURNING *
      `,
        [
          userId,
          imageUrl,
          plantInfo.commonName,
          plantInfo.scientificName,
          plantInfo.description,
          plantInfo.origin,
          plantInfo.sunlight,
          plantInfo.water,
          plantInfo.growthRate,
          accuracy,
        ],
      )

      const savedScan = result.rows[0] // –°–∞“õ—Ç–∞–ª“ì–∞–Ω —Å–∫–∞–Ω–µ—Ä–ª–µ—É –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∞–ª—É

      res.json({
        message: "”®—Å—ñ–º–¥—ñ–∫ —Å”ô—Ç—Ç—ñ –∞–Ω—ã“õ—Ç–∞–ª–¥—ã", // –°”ô—Ç—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã
        scan: {
          id: savedScan.id,
          imageUrl: savedScan.image_url,
          commonName: savedScan.common_name,
          scientificName: savedScan.scientific_name,
          description: savedScan.description,
          origin: savedScan.origin,
          sunlight: savedScan.sunlight,
          water: savedScan.water,
          growthRate: savedScan.growth_rate,
          accuracy: savedScan.accuracy,
          createdAt: savedScan.created_at,
        },
      })
    } catch (apiError) {
      console.error("Gemini API “õ–∞—Ç–µ—Å—ñ:", apiError.response?.data || apiError.message) // API “õ–∞—Ç–µ—Å—ñ

      // API “õ–∞—Ç–µ—Å—ñ –±–æ–ª—Å–∞, —Ä–µ–∑–µ—Ä–≤—Ç—ñ–∫ –∂–∞—É–∞–ø
      const plantInfo = {
        commonName: "–ñ–∞—Å—ã–ª ”©—Å—ñ–º–¥—ñ–∫",
        scientificName: "Plantae species",
        description: "AI —Å–µ—Ä–≤–∏—Å—ñ–º–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å –∂–æ“õ. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        origin: "–ë–µ–ª–≥—ñ—Å—ñ–∑",
        sunlight: "–û—Ä—Ç–∞—à–∞ –∂–∞—Ä—ã“õ",
        water: "–û—Ä—Ç–∞—à–∞ —Å—É–∞—Ä—É",
        growthRate: "–û—Ä—Ç–∞—à–∞",
      }

      const accuracy = 85

      const result = await pool.query(
        `
        INSERT INTO plant_scans 
        (user_id, image_url, common_name, scientific_name, description, origin, sunlight, water, growth_rate, accuracy)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        RETURNING *
      `,
        [
          userId,
          imageUrl,
          plantInfo.commonName,
          plantInfo.scientificName,
          plantInfo.description,
          plantInfo.origin,
          plantInfo.sunlight,
          plantInfo.water,
          plantInfo.growthRate,
          accuracy,
        ],
      )

      const savedScan = result.rows[0] // –°–∞“õ—Ç–∞–ª“ì–∞–Ω —Å–∫–∞–Ω–µ—Ä–ª–µ—É –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∞–ª—É

      res.json({
        message: "–°—É—Ä–µ—Ç —Å–∞“õ—Ç–∞–ª–¥—ã (AI “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑)", // API “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑ –±–æ–ª—Å–∞, —Ö–∞–±–∞—Ä–ª–∞–º–∞
        scan: {
          id: savedScan.id,
          imageUrl: savedScan.image_url,
          commonName: savedScan.common_name,
          scientificName: savedScan.scientific_name,
          description: savedScan.description,
          origin: savedScan.origin,
          sunlight: savedScan.sunlight,
          water: savedScan.water,
          growthRate: savedScan.growth_rate,
          accuracy: savedScan.accuracy,
          createdAt: savedScan.created_at,
        },
      })
    }
  } catch (error) {
    console.error("”®—Å—ñ–º–¥—ñ–∫ –∞–Ω—ã“õ—Ç–∞—É “õ–∞—Ç–µ—Å—ñ:", error) // “ö–∞—Ç–µ —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞
    res.status(500).json({ error: "”®—Å—ñ–º–¥—ñ–∫—Ç—ñ –∞–Ω—ã“õ—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã" }) // –°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ
  }
}

// “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Å–∫–∞–Ω–µ—Ä–ª–µ—É —Ç–∞—Ä–∏—Ö—ã–Ω –∞–ª—É
const getUserScans = async (req, res) => {
  try {
    const userId = req.user.id // “ö–æ–ª–¥–∞–Ω—É—à—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const page = Number.parseInt(req.query.page) || 1 // –ë–µ—Ç –Ω”©–º—ñ—Ä—ñ
    const limit = Number.parseInt(req.query.limit) || 10 // –ö”©—Ä—Å–µ—Ç—ñ–ª–µ—Ç—ñ–Ω –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä —Å–∞–Ω—ã
    const offset = (page - 1) * limit

    const result = await pool.query(
      `
      SELECT * FROM plant_scans 
      WHERE user_id = $1 
      ORDER BY created_at DESC 
      LIMIT $2 OFFSET $3
    `,
      [userId, limit, offset],
    )

    const countResult = await pool.query("SELECT COUNT(*) FROM plant_scans WHERE user_id = $1", [userId])
    const totalScans = Number.parseInt(countResult.rows[0].count) // –ñ–∞–ª–ø—ã —Å–∫–∞–Ω–µ—Ä–ª–µ—É–ª–µ—Ä —Å–∞–Ω—ã

    const scans = result.rows.map((scan) => ({
      id: scan.id,
      imageUrl: scan.image_url,
      commonName: scan.common_name,
      scientificName: scan.scientific_name,
      description: scan.description,
      origin: scan.origin,
      sunlight: scan.sunlight,
      water: scan.water,
      growthRate: scan.growth_rate,
      accuracy: scan.accuracy,
      createdAt: scan.created_at,
    }))

    res.json({
      scans,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalScans / limit),
        totalScans,
        hasNext: page < Math.ceil(totalScans / limit),
        hasPrev: page > 1,
      },
    })
  } catch (error) {
    console.error("–¢–∞—Ä–∏—Ö –∞–ª—É “õ–∞—Ç–µ—Å—ñ:", error)
    res.status(500).json({ error: "–¢–∞—Ä–∏—Ö—Ç—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã" }) // “ö–∞—Ç–µ —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞
  }
}

// –ë—ñ—Ä —Å–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ –∞–ª—É
const getScanById = async (req, res) => {
  try {
    const userId = req.user.id
    const scanId = req.params.id // –°–∫–∞–Ω–µ—Ä–ª–µ—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã

    const result = await pool.query("SELECT * FROM plant_scans WHERE id = $1 AND user_id = $2", [scanId, userId])

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "–°–∫–∞–Ω–µ—Ä–ª–µ—É —Ç–∞–±—ã–ª–º–∞–¥—ã" }) // –ï–≥–µ—Ä —Å–∫–∞–Ω–µ—Ä–ª–µ—É —Ç–∞–±—ã–ª–º–∞—Å–∞
    }

    const scan = result.rows[0]
    res.json({
      scan: {
        id: scan.id,
        imageUrl: scan.image_url,
        commonName: scan.common_name,
        scientificName: scan.scientific_name,
        description: scan.description,
        origin: scan.origin,
        sunlight: scan.sunlight,
        water: scan.water,
        growthRate: scan.growth_rate,
        accuracy: scan.accuracy,
        createdAt: scan.created_at,
      },
    })
  } catch (error) {
    console.error("–°–∫–∞–Ω–µ—Ä–ª–µ—É –∞–ª—É “õ–∞—Ç–µ—Å—ñ:", error)
    res.status(500).json({ error: "–°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã" }) // “ö–∞—Ç–µ —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞
  }
}

// –°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ ”©—à—ñ—Ä—É
const deleteScan = async (req, res) => {
  try {
    const userId = req.user.id
    const scanId = req.params.id // –°–∫–∞–Ω–µ—Ä–ª–µ—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã

    // –°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ —Ç–∞–±—É
    const scanResult = await pool.query("SELECT image_url FROM plant_scans WHERE id = $1 AND user_id = $2", [
      scanId,
      userId,
    ])

    if (scanResult.rows.length === 0) {
      return res.status(404).json({ error: "–°–∫–∞–Ω–µ—Ä–ª–µ—É —Ç–∞–±—ã–ª–º–∞–¥—ã" }) // –ï–≥–µ—Ä —Å–∫–∞–Ω–µ—Ä–ª–µ—É —Ç–∞–±—ã–ª–º–∞—Å–∞
    }

    const imageUrl = scanResult.rows[0].image_url // –°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ“£ —Å—É—Ä–µ—Ç—ñ
    const fileName = path.basename(imageUrl) // –°—É—Ä–µ—Ç—Ç—ñ“£ –∞—Ç—ã–Ω –∞–ª—É
    const filePath = path.join("uploads", fileName) // –°—É—Ä–µ—Ç—Ç—ñ“£ —Ç–æ–ª—ã“õ –∂–æ–ª—ã

    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath) // –ï–≥–µ—Ä —Ñ–∞–π–ª –±–∞—Ä –±–æ–ª—Å–∞, –æ–Ω—ã ”©—à—ñ—Ä—É
    }

    // –î–µ—Ä–µ–∫“õ–æ—Ä–¥–∞–Ω ”©—à—ñ—Ä—É
    await pool.query("DELETE FROM plant_scans WHERE id = $1 AND user_id = $2", [scanId, userId])

    res.json({ message: "–°–∫–∞–Ω–µ—Ä–ª–µ—É —Å”ô—Ç—Ç—ñ ”©—à—ñ—Ä—ñ–ª–¥—ñ" }) // –°–∫–∞–Ω–µ—Ä–ª–µ—É —Å”ô—Ç—Ç—ñ ”©—à—ñ—Ä—ñ–ª–≥–µ–Ω—ñ–Ω —Ö–∞–±–∞—Ä–ª–∞—É
  } catch (error) {
    console.error("–°–∫–∞–Ω–µ—Ä–ª–µ—É ”©—à—ñ—Ä—É “õ–∞—Ç–µ—Å—ñ:", error)
    res.status(500).json({ error: "–°–∫–∞–Ω–µ—Ä–ª–µ—É–¥—ñ ”©—à—ñ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã" }) // “ö–∞—Ç–µ —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const getUserStats = async (req, res) => {
  try {
    const userId = req.user.id

    const [totalScansResult, thisWeekResult, avgAccuracyResult, uniqueSpeciesResult] = await Promise.all([
      pool.query("SELECT COUNT(*) FROM plant_scans WHERE user_id = $1", [userId]),
      pool.query("SELECT COUNT(*) FROM plant_scans WHERE user_id = $1 AND created_at >= NOW() - INTERVAL '7 days'", [
        userId,
      ]),
      pool.query("SELECT AVG(accuracy) FROM plant_scans WHERE user_id = $1", [userId]),
      pool.query(
        "SELECT COUNT(DISTINCT scientific_name) FROM plant_scans WHERE user_id = $1 AND scientific_name IS NOT NULL",
        [userId],
      ),
    ])

    res.json({
      stats: {
        totalScans: Number.parseInt(totalScansResult.rows[0].count),
        thisWeek: Number.parseInt(thisWeekResult.rows[0].count),
        avgAccuracy: Math.round(Number.parseFloat(avgAccuracyResult.rows[0].avg) || 0),
        uniqueSpecies: Number.parseInt(uniqueSpeciesResult.rows[0].count),
      },
    })
  } catch (error) {
    console.error("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª—É “õ–∞—Ç–µ—Å—ñ:", error)
    res.status(500).json({ error: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã" }) // “ö–∞—Ç–µ —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞
  }
}

module.exports = {
  identifyPlant,
  getUserScans,
  getScanById,
  deleteScan,
  getUserStats,
}
