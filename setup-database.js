// –î–µ—Ä–µ–∫“õ–æ—Ä–¥—ã –æ—Ä–Ω–∞—Ç—É —Å–∫—Ä–∏–ø—Ç—ñ
const { Pool } = require("pg")
require("dotenv").config()

const setupDatabase = async () => {
  // –ê–ª–¥—ã–º–µ–Ω postgres –¥–µ—Ä–µ–∫“õ–æ—Ä—ã–Ω–∞ “õ–æ—Å—ã–ª—É
  const adminPool = new Pool({
    user: process.env.DB_USER || "postgres",
    host: process.env.DB_HOST || "localhost",
    database: "postgres", // ”ò–¥–µ–ø–∫—ñ postgres –¥–µ—Ä–µ–∫“õ–æ—Ä—ã
    password: process.env.DB_PASSWORD || "admin",
    port: Number.parseInt(process.env.DB_PORT) || 5432,
  })

  try {
    console.log("üîß –î–µ—Ä–µ–∫“õ–æ—Ä–¥—ã –æ—Ä–Ω–∞—Ç—É–¥–∞...")

    // –î–µ—Ä–µ–∫“õ–æ—Ä –±–∞—Ä –º–∞ —Ç–µ–∫—Å–µ—Ä—É
    const dbExists = await adminPool.query("SELECT 1 FROM pg_database WHERE datname = $1", [
      process.env.DB_NAME || "finalProj_db",
    ])

    if (dbExists.rows.length === 0) {
      // –î–µ—Ä–µ–∫“õ–æ—Ä –∂–∞—Å–∞—É
      await adminPool.query(`CREATE DATABASE "${process.env.DB_NAME || "finalProj_db"}"`)
      console.log(`‚úÖ –î–µ—Ä–µ–∫“õ–æ—Ä "${process.env.DB_NAME}" –∂–∞—Å–∞–ª–¥—ã`)
    } else {
      console.log(`‚úÖ –î–µ—Ä–µ–∫“õ–æ—Ä "${process.env.DB_NAME}" –±“±—Ä—ã–Ω –∂–∞—Å–∞–ª“ì–∞–Ω`)
    }

    await adminPool.end()

    // –ï–Ω–¥—ñ –∂–∞“£–∞ –¥–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ “õ–æ—Å—ã–ª—É
    const projectPool = new Pool({
      user: process.env.DB_USER || "postgres",
      host: process.env.DB_HOST || "localhost",
      database: process.env.DB_NAME || "finalProj_db",
      password: process.env.DB_PASSWORD || "admin",
      port: Number.parseInt(process.env.DB_PORT) || 5432,
    })

    // –ö–µ—Å—Ç–µ–ª–µ—Ä–¥—ñ –∂–∞—Å–∞—É
    await projectPool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        full_name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        avatar TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `)

    await projectPool.query(`
      CREATE TABLE IF NOT EXISTS plant_scans (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        image_url TEXT NOT NULL,
        common_name VARCHAR(255),
        scientific_name VARCHAR(255),
        description TEXT,
        origin VARCHAR(255),
        sunlight VARCHAR(255),
        water VARCHAR(255),
        growth_rate VARCHAR(255),
        accuracy INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `)

    console.log("‚úÖ –ë–∞—Ä–ª—ã“õ –∫–µ—Å—Ç–µ–ª–µ—Ä —Å”ô—Ç—Ç—ñ –∂–∞—Å–∞–ª–¥—ã")
    await projectPool.end()

    console.log("üéâ –î–µ—Ä–µ–∫“õ–æ—Ä –æ—Ä–Ω–∞—Ç—É –∞—è“õ—Ç–∞–ª–¥—ã!")
    process.exit(0)
  } catch (error) {
    console.error("‚ùå –î–µ—Ä–µ–∫“õ–æ—Ä –æ—Ä–Ω–∞—Ç—É “õ–∞—Ç–µ—Å—ñ:", error.message)
    console.log("\nüîß –ú“Ø–º–∫—ñ–Ω —à–µ—à—ñ–º–¥–µ—Ä:")
    console.log("1. PostgreSQL —Å–µ—Ä–≤–µ—Ä—ñ —ñ—Å–∫–µ “õ–æ—Å—ã–ª“ì–∞–Ω –±–∞ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑")
    console.log("2. .env —Ñ–∞–π–ª—ã–Ω–¥–∞“ì—ã –¥–µ—Ä–µ–∫“õ–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑")
    console.log("3. “ö–æ–ª–¥–∞–Ω—É—à—ã “õ“±“õ—ã“õ—Ç–∞—Ä—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑")
    process.exit(1)
  }
}

setupDatabase()
