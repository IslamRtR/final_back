const express = require("express") // Express ะบััะฐะฟัะฐะฝะฐััะฝ าะพัั
const cors = require("cors") // CORS าะพะปะดะฐัั าฏััะฝ ะบััะฐะฟัะฐะฝะฐ
const path = require("path") // ะััััะตัะผะตะฝ ะถาฑะผัั ัััะตั าฏััะฝ ะบััะฐะฟัะฐะฝะฐ
const rateLimit = require("express-rate-limit") // าัะทะผะตััั ัะตะบัะตั าฏััะฝ ะบััะฐะฟัะฐะฝะฐ
require("dotenv").config() // .env ัะฐะนะปัะฝะฐะฝ ะพััะฐ ะฐะนะฝัะผะฐะปัะปะฐััะฝ ะถาฏะบัะตั

const { createTables } = require("./config/database") // ะะตัะตะบาะพัาะฐ ะฐัะฝะฐะปาะฐะฝ ััะฝะบัะธั
const authRoutes = require("./routes/auth") // ะะฒัะพัะธะทะฐัะธั ะผะฐัััััั
const plantsRoutes = require("./routes/plants") // ำจััะผะดัะบัะตั ะผะฐัััััั

const app = express() // Express าะพััะผัะฐััะฝ ะธะฝะธัะธะฐะปะธะทะฐัะธัะปะฐั
const PORT = process.env.PORT || 5002 // ะะพัั ะฝำฉะผััั, .env ัะฐะนะปัะฝะฐ ัำะนะบะตั ะฝะตะผะตัะต 5002

// ะะตัะตะบาะพั ะบะตััะตะปะตััะฝ ะถะฐัะฐั
createTables()

// Uploads ะฟะฐะฟะบะฐััะฝ ะถะฐัะฐั (ะตะณะตั ะถะพา ะฑะพะปัะฐ)
const fs = require("fs")
const uploadsDir = "uploads"
if (!fs.existsSync(uploadsDir)) { // ะะณะตั "uploads" ะฟะฐะฟะบะฐัั ะถะพา ะฑะพะปัะฐ
  fs.mkdirSync(uploadsDir) // ะะฐะฟะบะฐะฝั ะถะฐัะฐั
  console.log("๐ Uploads ะฟะฐะฟะบะฐัั ะถะฐัะฐะปะดั")
}

// ะกาฑัะฐะฝัััะฐัะดั ัะตะบัะตั าฏััะฝ rate-limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ะผะธะฝัั
  max: 100, // ะะฐะบัะธะผัะผ 100 ัาฑัะฐะฝัั
})

// Middleware - าะพะปะดะฐะฝััาะฐ ะตะฝะณัะทั
app.use(limiter) // Rate limiting าะพัั
app.use(
  cors({
    origin: process.env.CLIENT_URL || "http://localhost:5173", // CORS ะบะพะฝัะธะณััะฐัะธััั
    credentials: true, // ะัะบะธะปะตัะดั าะพะปะดะฐะฝัาะฐ ัาฑาัะฐั ะฑะตัั
  }),
)
app.use(express.json({ limit: "10mb" })) // JSON ัะพัะผะฐััะฝะดะฐาั ะดะตะฝะตะปะตัะดั ำฉาฃะดะตั
app.use(express.urlencoded({ extended: true, limit: "10mb" })) // URL-ะบะพะดัะฐะปาะฐะฝ ะดะตัะตะบัะตัะดั ำฉาฃะดะตั

// ะกัะฐัะธะบะฐะปัา ัะฐะนะปะดะฐัะดั ะฑะตัั
app.use("/uploads", express.static("uploads")) // "uploads" ะฟะฐะฟะบะฐััะฝะฐะฝ ััะฐัะธะบะฐะปัา ัะฐะนะปะดะฐั าฑััะฝั

// ะะฐััััััะฐั
app.use("/api/auth", authRoutes) // ะะฒัะพัะธะทะฐัะธัาะฐ ะฐัะฝะฐะปาะฐะฝ ะผะฐััััั
app.use("/api/plants", plantsRoutes) // ำจััะผะดัะบัะตัะณะต ะฐัะฝะฐะปาะฐะฝ ะผะฐััััั

// ะะตะฝัะฐัะปัาัั ัะตะบัะตัั (health check) ะผะฐัััััั
app.get("/api/health", (req, res) => {
  res.json({
    status: "OK", // ะกะตัะฒะตัะดัาฃ ะถะฐะน-ะบาฏะนั
    timestamp: new Date().toISOString(), // าะฐะทััะณั ัะฐาัั
    uptime: process.uptime(), // ะกะตัะฒะตัะดัาฃ ะถาฑะผัั ัะฐาััั
    environment: process.env.NODE_ENV || "development", // ะััะฐะฝัาฃ ะบาฏะนั
  })
})

// าะฐัะต ำฉาฃะดะตั middleware
app.use((error, req, res, next) => {
  console.error("๐จ ะกะตัะฒะตั าะฐัะตัั:", error) // าะฐัะต ัััะฐะปั ัะฐะฑะฐั

  // ะคะฐะนะป ำฉะปัะตะผั ััะผ าฏะปะบะตะฝ ะฑะพะปัะฐ
  if (error.code === "LIMIT_FILE_SIZE") {
    return res.status(400).json({ error: "ะคะฐะนะป ำฉะปัะตะผั ััะผ าฏะปะบะตะฝ (ะผะฐะบัะธะผัะผ 5MB)" })
  }

  // ะกััะตั ัะฐะนะปะดะฐัั าะฐะฝะฐ าะฐะฑัะปะดะฐะฝะฐะดั
  if (error.message === "ะขะตะบ ัััะตั ัะฐะนะปะดะฐัั าะฐะฝะฐ าะฐะฑัะปะดะฐะฝะฐะดั") {
    return res.status(400).json({ error: error.message })
  }

  // ะะฐะปะฟั ัะตัะฒะตั าะฐัะตัั
  res.status(500).json({
    error: "ะกะตัะฒะตั าะฐัะตัั",
    details: process.env.NODE_ENV === "development" ? error.message : undefined, // ะะฐะผั ะพััะฐััะฝะดะฐ าะพััะผัะฐ ะฐาะฟะฐัะฐั
  })
})

// 404 าะฐัะตัั: ะถะพะป ัะฐะฑัะปะผะฐัะฐ
app.use("*", (req, res) => {
  console.log(`โ 404: ${req.method} ${req.originalUrl}`) // าะฐัะต ัััะฐะปั ัะฐะฑะฐั
  res.status(404).json({ error: "API endpoint ัะฐะฑัะปะผะฐะดั" }) // 404 าะฐัะตัั
})

// ะกะตัะฒะตั ััะบะต าะพัั
app.listen(PORT, () => {
  console.log(`๐ ะกะตัะฒะตั ${PORT} ะฟะพัััะฝะดะฐ ััะบะต าะพััะปะดั`) // ะกะตัะฒะตั ัััะฐะปั ัะฐะฑะฐั
  console.log(`๐ API ะผะตะบะตะฝะถะฐะนั: http://localhost:${PORT}`) // API ะผะตะบะตะฝะถะฐะนั
  console.log(`๐ CORS: ${process.env.CLIENT_URL || "http://localhost:5173"}`) // CORS ะผะตะบะตะฝะถะฐะนั
  console.log(`๐ค Gemini API: ${process.env.GOOGLE_GEMINI_API_KEY ? "าะะกะซะาะะ โ" : "าะะกะซะะะาะะ โ"}`) // Gemini API ะบาฏะนั
  console.log(`๐พ JWT Secret: ${process.env.JWT_SECRET ? "าะะกะซะาะะ โ" : "าะะกะซะะะาะะ โ"}`) // JWT Secret ะบาฏะนั

  // าะพะปะถะตััะผะดั API ัะฝะดะฟะพะธะฝััะตัั
  console.log("\n๐ าะพะปะถะตััะผะดั API endpoints:")
  console.log("  POST /api/auth/register")
  console.log("  POST /api/auth/login")
  console.log("  GET  /api/auth/profile")
  console.log("  POST /api/plants/identify")
  console.log("  GET  /api/plants/scans")
  console.log("  GET  /api/plants/stats")
  console.log("  GET  /api/health")
})
